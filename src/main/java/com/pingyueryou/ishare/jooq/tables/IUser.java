/*
 * This file is generated by jOOQ.
*/
package com.pingyueryou.ishare.jooq.tables;


import com.pingyueryou.ishare.jooq.Indexes;
import com.pingyueryou.ishare.jooq.Ishare;
import com.pingyueryou.ishare.jooq.Keys;
import com.pingyueryou.ishare.jooq.tables.records.IUserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IUser extends TableImpl<IUserRecord> {

    private static final long serialVersionUID = 1029699972;

    /**
     * The reference instance of <code>ishare.i_user</code>
     */
    public static final IUser I_USER = new IUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IUserRecord> getRecordType() {
        return IUserRecord.class;
    }

    /**
     * The column <code>ishare.i_user.id</code>.
     */
    public final TableField<IUserRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>ishare.i_user.nick_name</code>.
     */
    public final TableField<IUserRecord, String> NICK_NAME = createField("nick_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ishare.i_user.gender</code>.
     */
    public final TableField<IUserRecord, Integer> GENDER = createField("gender", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ishare.i_user.birthday</code>.
     */
    public final TableField<IUserRecord, Timestamp> BIRTHDAY = createField("birthday", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>ishare.i_user.open_id</code>.
     */
    public final TableField<IUserRecord, String> OPEN_ID = createField("open_id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ishare.i_user.union_id</code>.
     */
    public final TableField<IUserRecord, String> UNION_ID = createField("union_id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ishare.i_user.avatar_url</code>.
     */
    public final TableField<IUserRecord, String> AVATAR_URL = createField("avatar_url", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ishare.i_user.created_at</code>.
     */
    public final TableField<IUserRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>ishare.i_user.updated_at</code>.
     */
    public final TableField<IUserRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>ishare.i_user</code> table reference
     */
    public IUser() {
        this(DSL.name("i_user"), null);
    }

    /**
     * Create an aliased <code>ishare.i_user</code> table reference
     */
    public IUser(String alias) {
        this(DSL.name(alias), I_USER);
    }

    /**
     * Create an aliased <code>ishare.i_user</code> table reference
     */
    public IUser(Name alias) {
        this(alias, I_USER);
    }

    private IUser(Name alias, Table<IUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private IUser(Name alias, Table<IUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ishare.ISHARE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.I_USER_PRIMARY, Indexes.I_USER_UK_OPEN_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IUserRecord, Long> getIdentity() {
        return Keys.IDENTITY_I_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IUserRecord> getPrimaryKey() {
        return Keys.KEY_I_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IUserRecord>> getKeys() {
        return Arrays.<UniqueKey<IUserRecord>>asList(Keys.KEY_I_USER_PRIMARY, Keys.KEY_I_USER_UK_OPEN_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IUser as(String alias) {
        return new IUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IUser as(Name alias) {
        return new IUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IUser rename(String name) {
        return new IUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IUser rename(Name name) {
        return new IUser(name, null);
    }
}
