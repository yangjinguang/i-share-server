/*
 * This file is generated by jOOQ.
*/
package com.pingyueryou.ishare.jooq.tables;


import com.pingyueryou.ishare.jooq.Indexes;
import com.pingyueryou.ishare.jooq.Ishare;
import com.pingyueryou.ishare.jooq.Keys;
import com.pingyueryou.ishare.jooq.tables.records.IIdAuthOrderRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IIdAuthOrder extends TableImpl<IIdAuthOrderRecord> {

    private static final long serialVersionUID = -405206420;

    /**
     * The reference instance of <code>ishare.i_id_auth_order</code>
     */
    public static final IIdAuthOrder I_ID_AUTH_ORDER = new IIdAuthOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IIdAuthOrderRecord> getRecordType() {
        return IIdAuthOrderRecord.class;
    }

    /**
     * The column <code>ishare.i_id_auth_order.id</code>.
     */
    public final TableField<IIdAuthOrderRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>ishare.i_id_auth_order.user_id</code>.
     */
    public final TableField<IIdAuthOrderRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ishare.i_id_auth_order.role</code>.
     */
    public final TableField<IIdAuthOrderRecord, Integer> ROLE = createField("role", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ishare.i_id_auth_order.class_id</code>.
     */
    public final TableField<IIdAuthOrderRecord, Long> CLASS_ID = createField("class_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ishare.i_id_auth_order.student_name</code>.
     */
    public final TableField<IIdAuthOrderRecord, String> STUDENT_NAME = createField("student_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ishare.i_id_auth_order.relation</code>.
     */
    public final TableField<IIdAuthOrderRecord, String> RELATION = createField("relation", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ishare.i_id_auth_order.status</code>.
     */
    public final TableField<IIdAuthOrderRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>ishare.i_id_auth_order.created_at</code>.
     */
    public final TableField<IIdAuthOrderRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>ishare.i_id_auth_order.updated_at</code>.
     */
    public final TableField<IIdAuthOrderRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>ishare.i_id_auth_order</code> table reference
     */
    public IIdAuthOrder() {
        this(DSL.name("i_id_auth_order"), null);
    }

    /**
     * Create an aliased <code>ishare.i_id_auth_order</code> table reference
     */
    public IIdAuthOrder(String alias) {
        this(DSL.name(alias), I_ID_AUTH_ORDER);
    }

    /**
     * Create an aliased <code>ishare.i_id_auth_order</code> table reference
     */
    public IIdAuthOrder(Name alias) {
        this(alias, I_ID_AUTH_ORDER);
    }

    private IIdAuthOrder(Name alias, Table<IIdAuthOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private IIdAuthOrder(Name alias, Table<IIdAuthOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ishare.ISHARE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.I_ID_AUTH_ORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IIdAuthOrderRecord, Long> getIdentity() {
        return Keys.IDENTITY_I_ID_AUTH_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IIdAuthOrderRecord> getPrimaryKey() {
        return Keys.KEY_I_ID_AUTH_ORDER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IIdAuthOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<IIdAuthOrderRecord>>asList(Keys.KEY_I_ID_AUTH_ORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IIdAuthOrder as(String alias) {
        return new IIdAuthOrder(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IIdAuthOrder as(Name alias) {
        return new IIdAuthOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IIdAuthOrder rename(String name) {
        return new IIdAuthOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IIdAuthOrder rename(Name name) {
        return new IIdAuthOrder(name, null);
    }
}
